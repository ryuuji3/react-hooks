{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport useCallbackAfterRender from './useCallbackAfterRender';\nimport getMaskedValue from '../functions/getMaskedValue';\nimport getNextCursorPosition from '../functions/getNextCursorPosition';\nimport useDebugMode from './useDebugMode';\nimport parseMask from '../functions/convertStringMaskToRegexp';\nimport getPlaceholderFromMask from '../functions/getPlaceholderFromMask';\nimport getNewValue from '../functions/getNewValue';\n/**\n * \n * @param value \n * @param onChange \n * @param mask \n * @param displayMask \n */\n\nexport function useMask({\n  value = '',\n  onChange,\n  debug = false,\n  ...props\n}) {\n  _s();\n\n  const mask = useMemo(() => parseMask(props.mask), [props.mask]);\n  const placeholder = useMemo(() => getPlaceholderFromMask(mask, props.placeholder), [mask, props.placeholder]);\n  const maskedValue = getMaskedValue(value, mask, placeholder);\n  const {\n    log\n  } = useDebugMode(debug, {\n    mask,\n    placeholder,\n    value,\n    maskedValue\n  });\n  const lastCursorPosition = getNextCursorPosition(value, mask, log);\n  const scheduleAfterRender = useCallbackAfterRender(); // Using an onChange instead of keyboard events because mobile devices don't fire key events\n\n  function handleChange({\n    target\n  }) {\n    let newValue = getNewValue(target.value, value, maskedValue, mask, lastCursorPosition, log);\n    onChange(newValue); // onChange is asynchronous so update cursor after it re-renders\n\n    scheduleAfterRender(() => {\n      setCursorPositionForElement(target, getNextCursorPosition(newValue, mask, log));\n    });\n  } // For some reason, tests fail without this...\n  // TODO: Figure out why this is necessary\n\n\n  function onKeyUp({\n    target\n  }) {\n    setCursorPositionForElement(target, lastCursorPosition);\n  }\n\n  function onKeyDown({\n    target\n  }) {\n    // make sure cursor is positioned correctly before input happens\n    // or else the character might not be in the right position\n    setCursorPositionForElement(target, lastCursorPosition);\n  }\n\n  function onFocus({\n    target\n  }) {\n    // Work around in chrome to make sure focus sets cursor position\n    requestAnimationFrame(() => {\n      setCursorPositionForElement(target, getNextCursorPosition(target.value, mask, log));\n    });\n  }\n\n  return {\n    'data-value': value.length ? value : undefined,\n    value: value.length ? maskedValue : '',\n    placeholder,\n    onChange: handleChange,\n    onKeyDown,\n    onKeyUp,\n    onFocus\n  };\n}\n/**\n * Props you need to pass to useMask()\n */\n\n_s(useMask, \"5YzLLXF373BgJc/pXe0y5XLEqWI=\", false, function () {\n  return [useDebugMode, useCallbackAfterRender];\n});\n\n/**\n * \n * @param element \n * @param cursorPosition \n */\nfunction setCursorPositionForElement(element, cursorPosition) {\n  element === null || element === void 0 ? void 0 : element.setSelectionRange(cursorPosition, cursorPosition, 'forward');\n}\n\nexport default useMask;","map":{"version":3,"sources":["/home/codespace/workspace/react-mask-hook/src/hooks/useMask.ts"],"names":["useMemo","useCallbackAfterRender","getMaskedValue","getNextCursorPosition","useDebugMode","parseMask","getPlaceholderFromMask","getNewValue","useMask","value","onChange","debug","props","mask","placeholder","maskedValue","log","lastCursorPosition","scheduleAfterRender","handleChange","target","newValue","setCursorPositionForElement","onKeyUp","onKeyDown","onFocus","requestAnimationFrame","length","undefined","element","cursorPosition","setSelectionRange"],"mappings":"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","sourcesContent":["import { KeyboardEvent, ChangeEvent, FocusEvent, useMemo, } from 'react'\n\nimport useCallbackAfterRender from './useCallbackAfterRender'\nimport getMaskedValue from '../functions/getMaskedValue'\nimport getNextCursorPosition from '../functions/getNextCursorPosition'\n\nimport useDebugMode from './useDebugMode'\nimport parseMask from '../functions/convertStringMaskToRegexp'\nimport getPlaceholderFromMask from '../functions/getPlaceholderFromMask'\nimport getNewValue from '../functions/getNewValue'\n\n/**\n * \n * @param value \n * @param onChange \n * @param mask \n * @param displayMask \n */\nexport function useMask({\n    value = '',\n    onChange,\n    debug = false,\n    ...props\n}: MaskProps): InputProps {\n    const mask = useMemo(() => parseMask(props.mask), [ props.mask ])\n    const placeholder = useMemo(() => getPlaceholderFromMask(mask, props.placeholder), [ mask, props.placeholder ])\n    const maskedValue = getMaskedValue(value, mask, placeholder)\n    \n    const { log } = useDebugMode(debug, {\n        mask,\n        placeholder,\n        value,\n        maskedValue,\n    })\n    \n    const lastCursorPosition = getNextCursorPosition(value, mask, log)\n    const scheduleAfterRender = useCallbackAfterRender()\n\n    // Using an onChange instead of keyboard events because mobile devices don't fire key events\n    function handleChange({ target }: ChangeEvent<HTMLInputElement>) {\n        let newValue = getNewValue(\n            target.value,\n            value,\n            maskedValue,\n            mask,\n            lastCursorPosition,\n            log,\n        )\n\n        onChange(newValue)\n\n        // onChange is asynchronous so update cursor after it re-renders\n        scheduleAfterRender(() => {\n            setCursorPositionForElement(target, getNextCursorPosition(newValue, mask, log))\n        })\n    }\n\n    // For some reason, tests fail without this...\n    // TODO: Figure out why this is necessary\n    function onKeyUp({ target }: KeyboardEvent<HTMLInputElement>) {\n        setCursorPositionForElement(target as HTMLInputElement, lastCursorPosition)\n    }\n\n    function onKeyDown({ target}: KeyboardEvent<HTMLInputElement>) {\n        // make sure cursor is positioned correctly before input happens\n        // or else the character might not be in the right position\n        setCursorPositionForElement(target as HTMLInputElement, lastCursorPosition)\n    }\n\n    function onFocus({ target }: FocusEvent<HTMLInputElement>) {\n        // Work around in chrome to make sure focus sets cursor position\n        requestAnimationFrame(() => {\n            setCursorPositionForElement(target as HTMLInputElement, getNextCursorPosition(target.value, mask, log))\n        })\n    }\n\n    return {\n        'data-value': value.length ? value: undefined,\n        value: value.length ? maskedValue : '',\n        placeholder,\n\n        onChange: handleChange,\n        onKeyDown,\n        onKeyUp,\n        onFocus,\n    }\n}\n\n/**\n * Props you need to pass to useMask()\n */\ninterface MaskProps {\n    value: string\n    onChange: (value: string) => void\n    mask: string | Mask\n    placeholder: string\n    debug?: boolean\n}\n\n/**\n * Props you need to spread onto your input.\n */\ninterface InputProps {\n    'data-value'?: string\n    value: string\n    placeholder: string\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\n    onKeyDown: (e: KeyboardEvent<HTMLInputElement>) => void\n    onKeyUp: (e: KeyboardEvent<HTMLInputElement>) => void\n    onFocus: (e: FocusEvent<HTMLInputElement>) => void\n}\n\ntype Mask = Array<string | RegExp>\n\n/**\n * \n * @param element \n * @param cursorPosition \n */\nfunction setCursorPositionForElement(element: HTMLInputElement, cursorPosition: number): void {\n    element?.setSelectionRange(cursorPosition, cursorPosition, 'forward')\n}\n\nexport default useMask\nexport type {\n    MaskProps,\n    Mask,\n    InputProps,\n}"]},"metadata":{},"sourceType":"module"}