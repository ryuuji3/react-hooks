{"ast":null,"code":"/**\n * \n * @param maskedValue \n * @param mask\n */\nfunction fitInputValueIntoMask(maskedValue, mask) {\n  return mask.reduce((result, patternOrCharacter, characterPosition) => {\n    if (patternOrCharacter instanceof RegExp) {}\n\n    const currentCharacter = maskedValue.charAt(characterPosition);\n\n    if (patternOrCharacter instanceof RegExp && patternOrCharacter.test(currentCharacter)) {\n      result[characterPosition] = currentCharacter;\n    }\n\n    return result;\n  }, [...mask]);\n}\n\nexport default fitInputValueIntoMask;","map":{"version":3,"sources":["/home/codespace/workspace/react-mask-hook/src/functions/fitInputValueIntoMask.ts"],"names":["fitInputValueIntoMask","maskedValue","mask","reduce","result","patternOrCharacter","characterPosition","RegExp","currentCharacter","charAt","test"],"mappings":"AAGA;AACA;AACA;AACA;AACA;AACA,SAASA,qBAAT,CAA+BC,WAA/B,EAAoDC,IAApD,EAAsE;AAClE,SAAOA,IAAI,CAACC,MAAL,CAAY,CAACC,MAAD,EAASC,kBAAT,EAA6BC,iBAA7B,KAAmD;AAClE,QAAID,kBAAkB,YAAYE,MAAlC,EAA0C,CAEzC;;AAED,UAAMC,gBAAgB,GAAGP,WAAW,CAACQ,MAAZ,CAAmBH,iBAAnB,CAAzB;;AAEA,QAAID,kBAAkB,YAAYE,MAA9B,IAAwCF,kBAAkB,CAACK,IAAnB,CAAwBF,gBAAxB,CAA5C,EAAuF;AACnFJ,MAAAA,MAAM,CAACE,iBAAD,CAAN,GAA4BE,gBAA5B;AACH;;AAED,WAAOJ,MAAP;AACH,GAZM,EAYJ,CAAC,GAAGF,IAAJ,CAZI,CAAP;AAaH;;AAED,eAAeF,qBAAf","sourcesContent":["import { Mask } from '../hooks/useMask'\n\n\n/**\n * \n * @param maskedValue \n * @param mask\n */\nfunction fitInputValueIntoMask(maskedValue: string, mask: Mask): Mask {\n    return mask.reduce((result, patternOrCharacter, characterPosition) => {\n        if (patternOrCharacter instanceof RegExp) {\n\n        }\n        \n        const currentCharacter = maskedValue.charAt(characterPosition)\n            \n        if (patternOrCharacter instanceof RegExp && patternOrCharacter.test(currentCharacter)) {\n            result[characterPosition] = currentCharacter\n        }\n\n        return result\n    }, [...mask])\n}\n\nexport default fitInputValueIntoMask"]},"metadata":{},"sourceType":"module"}