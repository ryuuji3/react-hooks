{"ast":null,"code":"/**\n * Assuming every character is wrapped in [], will extract list of tokens.\n * \n * @param regexp \n */\nfunction extractCharacterTokensFromRegex(regexp) {\n  var _characterTokens$map;\n\n  // look for [.+] but make sure there are no embedded characters [] inside\n  const characterTokens = regexp.source.match(/\\[[^\\]]+[^[]+\\]/g); // Create regexps for each token but make matches insensitive\n\n  return (_characterTokens$map = characterTokens === null || characterTokens === void 0 ? void 0 : characterTokens.map(pattern => new RegExp(pattern, 'i'))) !== null && _characterTokens$map !== void 0 ? _characterTokens$map : [];\n}\n\nexport default extractCharacterTokensFromRegex;","map":{"version":3,"sources":["/home/codespace/workspace/react-mask-hook/src/functions/extractCharacterTokensFromRegex.ts"],"names":["extractCharacterTokensFromRegex","regexp","characterTokens","source","match","map","pattern","RegExp"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,+BAAT,CAAyCC,MAAzC,EAAmE;AAAA;;AAC/D;AACA,QAAMC,eAAe,GAAGD,MAAM,CAACE,MAAP,CAAcC,KAAd,CAAoB,kBAApB,CAAxB,CAF+D,CAI/D;;AACA,iCAAOF,eAAP,aAAOA,eAAP,uBAAOA,eAAe,CAAEG,GAAjB,CAAqBC,OAAO,IAAI,IAAIC,MAAJ,CAAWD,OAAX,EAAoB,GAApB,CAAhC,CAAP,uEAAoE,EAApE;AACH;;AAED,eAAeN,+BAAf","sourcesContent":["/**\n * Assuming every character is wrapped in [], will extract list of tokens.\n * \n * @param regexp \n */\nfunction extractCharacterTokensFromRegex(regexp: RegExp): RegExp[] {\n    // look for [.+] but make sure there are no embedded characters [] inside\n    const characterTokens = regexp.source.match(/\\[[^\\]]+[^[]+\\]/g)\n\n    // Create regexps for each token but make matches insensitive\n    return characterTokens?.map(pattern => new RegExp(pattern, 'i')) ?? []\n}\n\nexport default extractCharacterTokensFromRegex"]},"metadata":{},"sourceType":"module"}