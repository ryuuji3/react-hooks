{"ast":null,"code":"import { getMaskFromMaskedValue } from './regexHelpers';\nimport fitInputValueIntoMask from './fitInputValueIntoMask';\n/**\n * \n * @param value \n * @param mask \n * @param displayMask single character or exact length string\n */\n\nfunction getMaskedValue(value, mask, displayMask) {\n  return typeof mask === 'string' ? getMaskedValueForStringMask(value, mask, displayMask) : getMaskedValueForRegExpMask(value, mask, displayMask);\n}\n\nfunction getMaskedValueForStringMask(value, mask, displayMask) {\n  let maskCharacters = getMaskFromMaskedValue(mask).split('');\n  const maskedValue = fitInputValueIntoMask(value, mask);\n\n  if (displayMask.length === 1) {\n    return maskedValue.replace(/#/g, displayMask); // single mask character replacement\n  } else if (displayMask.length > 1) {\n    if (displayMask.length) // assuming that the display mask matches the same format as the mask\n      // character differences must be substitutes for mask special characters like '#'\n      maskCharacters = maskedValue.split('');\n    return maskCharacters.reduce((result, currentMaskCharacter, characterIndex) => {\n      if (currentMaskCharacter === '#') {\n        result[characterIndex] = displayMask[characterIndex]; // replace placeholders with matching display mask character\n      }\n\n      return result;\n    }, maskCharacters).join('');\n  }\n\n  return maskedValue; // just use the mask as is if no mask character or display mask was specified\n}\n\nfunction getMaskedValueForRegExpMask(value, mask, displayMask) {\n  return ''; // TODO: Implement\n}\n\nexport default getMaskedValue;","map":{"version":3,"sources":["/home/codespace/workspace/react-mask-hook/src/functions/getMaskedValue.ts"],"names":["getMaskFromMaskedValue","fitInputValueIntoMask","getMaskedValue","value","mask","displayMask","getMaskedValueForStringMask","getMaskedValueForRegExpMask","maskCharacters","split","maskedValue","length","replace","reduce","result","currentMaskCharacter","characterIndex","join"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,gBAAvC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AAGA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAAuCC,IAAvC,EAA8EC,WAA9E,EAA2G;AACvG,SAAO,OAAOD,IAAP,KAAgB,QAAhB,GACDE,2BAA2B,CAACH,KAAD,EAAQC,IAAR,EAAcC,WAAd,CAD1B,GAEDE,2BAA2B,CAACJ,KAAD,EAAQC,IAAR,EAAcC,WAAd,CAFjC;AAGH;;AAED,SAASC,2BAAT,CAAqCH,KAArC,EAAoDC,IAApD,EAAkEC,WAAlE,EAA+F;AAC3F,MAAIG,cAAc,GAAGR,sBAAsB,CAACI,IAAD,CAAtB,CAA6BK,KAA7B,CAAmC,EAAnC,CAArB;AACA,QAAMC,WAAW,GAAGT,qBAAqB,CAACE,KAAD,EAAQC,IAAR,CAAzC;;AAEA,MAAIC,WAAW,CAACM,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,WAAOD,WAAW,CAACE,OAAZ,CAAoB,IAApB,EAA0BP,WAA1B,CAAP,CAD0B,CACoB;AACjD,GAFD,MAEO,IAAIA,WAAW,CAACM,MAAZ,GAAqB,CAAzB,EAA4B;AAC/B,QAAIN,WAAW,CAACM,MAAhB,EACA;AACA;AACAH,MAAAA,cAAc,GAAGE,WAAW,CAACD,KAAZ,CAAkB,EAAlB,CAAjB;AAEA,WAAOD,cAAc,CAACK,MAAf,CAAsB,CAACC,MAAD,EAASC,oBAAT,EAA+BC,cAA/B,KAAkD;AAC3E,UAAID,oBAAoB,KAAK,GAA7B,EAAkC;AAC9BD,QAAAA,MAAM,CAACE,cAAD,CAAN,GAAyBX,WAAW,CAACW,cAAD,CAApC,CAD8B,CACuB;AACxD;;AAED,aAAOF,MAAP;AACH,KANM,EAMJN,cANI,EAMYS,IANZ,CAMiB,EANjB,CAAP;AAOH;;AAED,SAAOP,WAAP,CArB2F,CAqBxE;AACtB;;AAED,SAASH,2BAAT,CAAqCJ,KAArC,EAAoDC,IAApD,EAAkFC,WAAlF,EAA+G;AAC3G,SAAO,EAAP,CAD2G,CACjG;AACb;;AAED,eAAeH,cAAf","sourcesContent":["import { getMaskFromMaskedValue } from './regexHelpers'\nimport fitInputValueIntoMask from './fitInputValueIntoMask'\n\n\n/**\n * \n * @param value \n * @param mask \n * @param displayMask single character or exact length string\n */\nfunction getMaskedValue(value: string, mask: string | Array<String | RegExp>, displayMask: string): string {\n    return typeof mask === 'string'\n        ? getMaskedValueForStringMask(value, mask, displayMask)\n        : getMaskedValueForRegExpMask(value, mask, displayMask) \n}\n\nfunction getMaskedValueForStringMask(value: string, mask: string, displayMask: string): string {\n    let maskCharacters = getMaskFromMaskedValue(mask).split('')\n    const maskedValue = fitInputValueIntoMask(value, mask)\n\n    if (displayMask.length === 1) {\n        return maskedValue.replace(/#/g, displayMask) // single mask character replacement\n    } else if (displayMask.length > 1) {\n        if (displayMask.length)\n        // assuming that the display mask matches the same format as the mask\n        // character differences must be substitutes for mask special characters like '#'\n        maskCharacters = maskedValue.split('')\n\n        return maskCharacters.reduce((result, currentMaskCharacter, characterIndex) => {\n            if (currentMaskCharacter === '#') {\n                result[characterIndex] = displayMask[characterIndex] // replace placeholders with matching display mask character\n            }\n\n            return result\n        }, maskCharacters).join('')\n    }\n\n    return maskedValue // just use the mask as is if no mask character or display mask was specified\n}\n\nfunction getMaskedValueForRegExpMask(value: string, mask: Array<String | RegExp>, displayMask: string): string {\n    return '' // TODO: Implement\n}\n\nexport default getMaskedValue"]},"metadata":{},"sourceType":"module"}