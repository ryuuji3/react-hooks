{"ast":null,"code":"/**\n * If necessary, we'll convert from old format to new one using this helper.\n * \n * @param mask \n */\nfunction parseMask(mask) {\n  if (typeof mask === 'string') {\n    console.warn('string masks are deprecated, please use the regexp format.');\n    return convertStringMaskToRegExpMask(mask);\n  } else {\n    return mask; // it's already the correct format\n  }\n}\n\nfunction convertStringMaskToRegExpMask(mask) {\n  const characters = mask.split('');\n  return characters.reduce((maskCharacters, character, currentCharacterIndex) => {\n    if (/#/.test(character)) {\n      maskCharacters[currentCharacterIndex] = /\\d/;\n    }\n\n    return maskCharacters;\n  }, characters);\n}\n\nexport default parseMask;","map":{"version":3,"sources":["/home/codespace/workspace/react-mask-hook/src/functions/convertStringMaskToRegexp.ts"],"names":["parseMask","mask","console","warn","convertStringMaskToRegExpMask","characters","split","reduce","maskCharacters","character","currentCharacterIndex","test"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,CAAmBC,IAAnB,EAAwC;AACpC,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC1BC,IAAAA,OAAO,CAACC,IAAR,CAAa,4DAAb;AACA,WAAOC,6BAA6B,CAACH,IAAD,CAApC;AACH,GAHD,MAGO;AACH,WAAOA,IAAP,CADG,CACS;AACf;AACJ;;AAED,SAASG,6BAAT,CAAuCH,IAAvC,EAA2D;AACvD,QAAMI,UAAU,GAAGJ,IAAI,CAACK,KAAL,CAAW,EAAX,CAAnB;AAEA,SAAOD,UAAU,CAACE,MAAX,CAAwB,CAACC,cAAD,EAAiBC,SAAjB,EAA4BC,qBAA5B,KAAsD;AACjF,QAAI,IAAIC,IAAJ,CAASF,SAAT,CAAJ,EAAyB;AACrBD,MAAAA,cAAc,CAACE,qBAAD,CAAd,GAAwC,IAAxC;AACH;;AAED,WAAOF,cAAP;AACH,GANM,EAMJH,UANI,CAAP;AAOH;;AAED,eAAeL,SAAf","sourcesContent":["import { Mask } from '../hooks/useMask'\n\n/**\n * If necessary, we'll convert from old format to new one using this helper.\n * \n * @param mask \n */\nfunction parseMask(mask: string | Mask) {\n    if (typeof mask === 'string') {\n        console.warn('string masks are deprecated, please use the regexp format.')\n        return convertStringMaskToRegExpMask(mask)\n    } else {\n        return mask // it's already the correct format\n    }\n}\n\nfunction convertStringMaskToRegExpMask(mask: string): Mask {\n    const characters = mask.split('')\n\n    return characters.reduce<Mask>((maskCharacters, character, currentCharacterIndex) => {\n        if (/#/.test(character)) {\n            maskCharacters[currentCharacterIndex] = /\\d/\n        }\n\n        return maskCharacters\n    }, characters)\n}\n\nexport default parseMask"]},"metadata":{},"sourceType":"module"}