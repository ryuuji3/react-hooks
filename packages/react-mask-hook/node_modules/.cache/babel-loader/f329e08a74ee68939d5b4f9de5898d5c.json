{"ast":null,"code":"import { getMaskFromMaskedValue, getNumbersFromMaskedValue } from './regexHelpers';\n/**\n * \n * @param value \n * @param mask\n */\n\nfunction fitInputValueIntoMask(value, mask) {\n  return typeof mask === 'string' ? fitInputValueIntoStringMask(value, mask) : fitInputValueIntoRegExpMask(value, mask);\n}\n\nfunction fitInputValueIntoStringMask(value, mask) {\n  const maskCharacters = getMaskFromMaskedValue(mask).split('');\n  const valueCharacters = getNumbersFromMaskedValue(value).split(''); // replace mask character with matching input character\n\n  maskCharacters.forEach((_, charIndex) => {\n    var _valueCharacters$char;\n\n    return maskCharacters[charIndex] = (_valueCharacters$char = valueCharacters[charIndex]) !== null && _valueCharacters$char !== void 0 ? _valueCharacters$char : maskCharacters[charIndex];\n  }); // fit mask array back into mask, preserving spaces and special characters\n\n  return maskCharacters.reduce((result, maskCharacter) => result.replace(/#/, maskCharacter), mask);\n}\n\nfunction fitInputValueIntoRegExpMask(value, mask) {\n  return ''; // TODO: Implement\n}\n\nexport default fitInputValueIntoMask;","map":{"version":3,"sources":["/home/codespace/workspace/react-mask-hook/src/functions/fitInputValueIntoMask.ts"],"names":["getMaskFromMaskedValue","getNumbersFromMaskedValue","fitInputValueIntoMask","value","mask","fitInputValueIntoStringMask","fitInputValueIntoRegExpMask","maskCharacters","split","valueCharacters","forEach","_","charIndex","reduce","result","maskCharacter","replace"],"mappings":"AAAA,SAASA,sBAAT,EAAiCC,yBAAjC,QAAkE,gBAAlE;AAGA;AACA;AACA;AACA;AACA;;AACA,SAASC,qBAAT,CAA+BC,KAA/B,EAA8CC,IAA9C,EAA6F;AACzF,SAAO,OAAOA,IAAP,KAAgB,QAAhB,GACDC,2BAA2B,CAACF,KAAD,EAAQC,IAAR,CAD1B,GAEDE,2BAA2B,CAACH,KAAD,EAAQC,IAAR,CAFjC;AAGH;;AAED,SAASC,2BAAT,CAAqCF,KAArC,EAAoDC,IAApD,EAA0E;AACtE,QAAMG,cAAc,GAAGP,sBAAsB,CAACI,IAAD,CAAtB,CAA6BI,KAA7B,CAAmC,EAAnC,CAAvB;AACA,QAAMC,eAAe,GAAGR,yBAAyB,CAACE,KAAD,CAAzB,CAAiCK,KAAjC,CAAuC,EAAvC,CAAxB,CAFsE,CAItE;;AACAD,EAAAA,cAAc,CAACG,OAAf,CAAuB,CAACC,CAAD,EAAIC,SAAJ;AAAA;;AAAA,WAAkBL,cAAc,CAACK,SAAD,CAAd,4BAA4BH,eAAe,CAACG,SAAD,CAA3C,yEAA0DL,cAAc,CAACK,SAAD,CAA1F;AAAA,GAAvB,EALsE,CAOtE;;AACA,SAAOL,cAAc,CAACM,MAAf,CAAsB,CAACC,MAAD,EAASC,aAAT,KAA2BD,MAAM,CAACE,OAAP,CAAe,GAAf,EAAoBD,aAApB,CAAjD,EAAqFX,IAArF,CAAP;AACH;;AAED,SAASE,2BAAT,CAAqCH,KAArC,EAAoDC,IAApD,EAA0F;AACtF,SAAO,EAAP,CADsF,CAC5E;AACb;;AAED,eAAeF,qBAAf","sourcesContent":["import { getMaskFromMaskedValue, getNumbersFromMaskedValue } from './regexHelpers'\n\n\n/**\n * \n * @param value \n * @param mask\n */\nfunction fitInputValueIntoMask(value: string, mask: string | Array<String | RegExp>): string {\n    return typeof mask === 'string'\n        ? fitInputValueIntoStringMask(value, mask)\n        : fitInputValueIntoRegExpMask(value, mask)\n}\n\nfunction fitInputValueIntoStringMask(value: string, mask: string): string {\n    const maskCharacters = getMaskFromMaskedValue(mask).split('')\n    const valueCharacters = getNumbersFromMaskedValue(value).split('')\n\n    // replace mask character with matching input character\n    maskCharacters.forEach((_, charIndex) => maskCharacters[charIndex] = valueCharacters[charIndex] ?? maskCharacters[charIndex])\n\n    // fit mask array back into mask, preserving spaces and special characters\n    return maskCharacters.reduce((result, maskCharacter) => result.replace(/#/, maskCharacter), mask)\n}\n\nfunction fitInputValueIntoRegExpMask(value: string, mask: Array<String | RegExp>): string {\n    return '' // TODO: Implement\n}\n\nexport default fitInputValueIntoMask"]},"metadata":{},"sourceType":"module"}