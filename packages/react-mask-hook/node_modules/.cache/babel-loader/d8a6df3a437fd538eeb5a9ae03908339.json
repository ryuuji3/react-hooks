{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useDebugValue, useRef } from 'react';\n\nfunction useDebugMode(debug, values) {\n  _s();\n\n  const hasDisplayedDebugInfo = useRef(false); // Add debugging in inspector\n\n  useDebugValue(debug && values);\n\n  if (debug && hasDisplayedDebugInfo.current === false) {\n    console.log(displayDebugInfo(values));\n    hasDisplayedDebugInfo.current = true;\n  }\n}\n\n_s(useDebugMode, \"rFNkfqMCQy7xycQeFxQDEScvIVc=\");\n\nfunction getMask(mask) {\n  return typeof mask === 'string' ? `\"${mask}\"` : mask.join(',');\n}\n\nfunction displayDebugInfo(values) {\n  return `useMask Debug Info:\n\nMask: ${getMask(values.mask)}\nDisplay Mask: \"${values.displayMask}\"\n`;\n}\n\nexport default useDebugMode;","map":{"version":3,"sources":["/home/codespace/workspace/react-mask-hook/src/hooks/useDebugMode.ts"],"names":["useDebugValue","useRef","useDebugMode","debug","values","hasDisplayedDebugInfo","current","console","log","displayDebugInfo","getMask","mask","join","displayMask"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,MAAxB,QAAsC,OAAtC;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAAsCC,MAAtC,EAA+D;AAAA;;AAC3D,QAAMC,qBAAqB,GAAGJ,MAAM,CAAC,KAAD,CAApC,CAD2D,CAG3D;;AACAD,EAAAA,aAAa,CAACG,KAAK,IAAIC,MAAV,CAAb;;AAEA,MAAID,KAAK,IAAIE,qBAAqB,CAACC,OAAtB,KAAkC,KAA/C,EAAsD;AAClDC,IAAAA,OAAO,CAACC,GAAR,CAAYC,gBAAgB,CAACL,MAAD,CAA5B;AACAC,IAAAA,qBAAqB,CAACC,OAAtB,GAAgC,IAAhC;AACH;AACJ;;GAVQJ,Y;;AAYT,SAASQ,OAAT,CAAiBC,IAAjB,EAAwD;AACpD,SAAO,OAAOA,IAAP,KAAgB,QAAhB,GACA,IAAGA,IAAK,GADR,GAEDA,IAAI,CAACC,IAAL,CAAU,GAAV,CAFN;AAGH;;AAED,SAASH,gBAAT,CAA0BL,MAA1B,EAAmD;AAC/C,SACH;AACD;AACA,QAAQM,OAAO,CAACN,MAAM,CAACO,IAAR,CAAc;AAC7B,iBAAiBP,MAAM,CAACS,WAAY;AACpC,CALI;AAOH;;AASD,eAAeX,YAAf","sourcesContent":["import { useDebugValue, useRef } from 'react'\n\nfunction useDebugMode(debug: boolean, values: DebugModeValues) {\n    const hasDisplayedDebugInfo = useRef(false)\n\n    // Add debugging in inspector\n    useDebugValue(debug && values)\n\n    if (debug && hasDisplayedDebugInfo.current === false) {\n        console.log(displayDebugInfo(values))\n        hasDisplayedDebugInfo.current = true\n    }\n}\n\nfunction getMask(mask: string | Array<String | RegExp>) {\n    return typeof mask === 'string'\n        ? `\"${mask}\"`\n        : mask.join(',')\n}\n\nfunction displayDebugInfo(values: DebugModeValues) {\n    return (\n`useMask Debug Info:\n\nMask: ${getMask(values.mask)}\nDisplay Mask: \"${values.displayMask}\"\n`\n)\n}\n\ninterface DebugModeValues {\n    mask: string | Array<String | RegExp>\n    displayMask: string\n    value: string\n    maskedValue: string\n}\n\nexport default useDebugMode"]},"metadata":{},"sourceType":"module"}