{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport useCallbackAfterRender from './useCallbackAfterRender';\nimport getMaskedValue from '../functions/getMaskedValue';\nimport getNextCursorPosition from '../functions/getNextCursorPosition';\nimport useDebugMode from './useDebugMode';\nimport parseMask from '../functions/convertStringMaskToRegexp';\nimport getPlaceholderFromMask from '../functions/getPlaceholderFromMask';\n/**\n * \n * @param value \n * @param onChange \n * @param mask \n * @param displayMask \n */\n\nexport function useMask({\n  value = '',\n  onChange,\n  displayMask,\n  debug = false,\n  ...props\n}) {\n  _s();\n\n  const mask = useMemo(() => parseMask(props.mask), [props.mask]);\n  const placeholder = useMemo(() => getPlaceholderFromMask(mask, displayMask), [mask, displayMask]);\n  const maskedValue = getMaskedValue(value, mask, placeholder);\n  const lastCursorPosition = getNextCursorPosition(value, mask);\n  const scheduleAfterRender = useCallbackAfterRender();\n  useDebugMode(debug, {\n    mask,\n    displayMask,\n    value,\n    maskedValue\n  }); // Using an onChange instead of keyboard events because mobile devices don't fire key events\n\n  function handleChange({\n    target\n  }) {\n    let newValue;\n\n    if (target.value.length > maskedValue.length) {\n      const maskCharacterOrPattern = mask[lastCursorPosition];\n      const insertedCharacter = target.value.charAt(lastCursorPosition);\n\n      if (maskCharacterOrPattern instanceof RegExp && maskCharacterOrPattern.test(insertedCharacter)) {\n        newValue = `${value}${insertedCharacter}`;\n      } else {\n        newValue = value; // ignore\n      }\n    } else {\n      newValue = value.slice(0, value.length - 1); // Remove a character\n    }\n\n    onChange(newValue); // onChange is asynchronous so update cursor after it re-renders\n\n    scheduleAfterRender(() => {\n      setCursorPositionForElement(target, getNextCursorPosition(newValue, mask));\n    });\n  } // For some reason, tests fail without this...\n  // TODO: Figure out why this is necessary\n\n\n  function onKeyUp({\n    target\n  }) {\n    setCursorPositionForElement(target, lastCursorPosition);\n  }\n\n  function onKeyDown({\n    target\n  }) {\n    // make sure cursor is positioned correctly before input happens\n    // or else the character might not be in the right position\n    setCursorPositionForElement(target, lastCursorPosition);\n  }\n\n  function onFocus({\n    target\n  }) {\n    // Work around in chrome to make sure focus sets cursor position\n    requestAnimationFrame(() => {\n      setCursorPositionForElement(target, getNextCursorPosition(target.value, mask));\n    });\n  }\n\n  return {\n    'data-value': value.length ? value : undefined,\n    value: value.length ? maskedValue : placeholder,\n    // render placeholder if they haven't entered anything\n    placeholder,\n    onChange: handleChange,\n    onKeyDown,\n    onKeyUp,\n    onFocus\n  };\n}\n\n_s(useMask, \"3G9VvikYqtAYFdgdBbJIDtRdMco=\", false, function () {\n  return [useCallbackAfterRender, useDebugMode];\n});\n\n/**\n * \n * @param element \n * @param cursorPosition \n */\nfunction setCursorPositionForElement(element, cursorPosition) {\n  element === null || element === void 0 ? void 0 : element.setSelectionRange(cursorPosition, cursorPosition, 'forward');\n}\n\nexport default useMask;","map":{"version":3,"sources":["/home/codespace/workspace/react-mask-hook/src/hooks/useMask.ts"],"names":["useMemo","useCallbackAfterRender","getMaskedValue","getNextCursorPosition","useDebugMode","parseMask","getPlaceholderFromMask","useMask","value","onChange","displayMask","debug","props","mask","placeholder","maskedValue","lastCursorPosition","scheduleAfterRender","handleChange","target","newValue","length","maskCharacterOrPattern","insertedCharacter","charAt","RegExp","test","slice","setCursorPositionForElement","onKeyUp","onKeyDown","onFocus","requestAnimationFrame","undefined","element","cursorPosition","setSelectionRange"],"mappings":"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","sourcesContent":["import { KeyboardEvent, ChangeEvent, FocusEvent, useMemo, } from 'react'\n\nimport useCallbackAfterRender from './useCallbackAfterRender'\nimport getMaskedValue from '../functions/getMaskedValue'\nimport getNextCursorPosition from '../functions/getNextCursorPosition'\n\nimport useDebugMode from './useDebugMode'\nimport parseMask from '../functions/convertStringMaskToRegexp'\nimport getPlaceholderFromMask from '../functions/getPlaceholderFromMask'\n\n/**\n * \n * @param value \n * @param onChange \n * @param mask \n * @param displayMask \n */\nexport function useMask({\n    value = '',\n    onChange,\n    displayMask,\n    debug = false,\n    ...props\n}: MaskProps) {\n    const mask = useMemo(() => parseMask(props.mask), [ props.mask ])\n    const placeholder = useMemo(() => getPlaceholderFromMask(mask, displayMask), [ mask, displayMask ])\n\n    const maskedValue = getMaskedValue(value, mask, placeholder)\n    const lastCursorPosition = getNextCursorPosition(value, mask)\n    const scheduleAfterRender = useCallbackAfterRender()\n\n    useDebugMode(debug, {\n        mask,\n        displayMask,\n        value,\n        maskedValue,\n    })\n\n    // Using an onChange instead of keyboard events because mobile devices don't fire key events\n    function handleChange({ target }: ChangeEvent<HTMLInputElement>) {\n        let newValue: string\n\n        if (target.value.length > maskedValue.length) {\n            const maskCharacterOrPattern = mask[lastCursorPosition]\n            const insertedCharacter = target.value.charAt(lastCursorPosition)\n\n            if (maskCharacterOrPattern instanceof RegExp && maskCharacterOrPattern.test(insertedCharacter)) {\n                newValue = `${value}${insertedCharacter}`\n            } else {\n                newValue = value // ignore\n            }\n        } else {\n            newValue = value.slice(0, value.length - 1) // Remove a character\n        }\n\n        onChange(newValue)\n\n        // onChange is asynchronous so update cursor after it re-renders\n        scheduleAfterRender(() => {\n            setCursorPositionForElement(target, getNextCursorPosition(newValue, mask))\n        })\n    }\n\n    // For some reason, tests fail without this...\n    // TODO: Figure out why this is necessary\n    function onKeyUp({ target }: KeyboardEvent<HTMLInputElement>) {\n        setCursorPositionForElement(target as HTMLInputElement, lastCursorPosition)\n    }\n\n    function onKeyDown({ target}: KeyboardEvent<HTMLInputElement>) {\n        // make sure cursor is positioned correctly before input happens\n        // or else the character might not be in the right position\n        setCursorPositionForElement(target as HTMLInputElement, lastCursorPosition)\n    }\n\n    function onFocus({ target }: FocusEvent<HTMLInputElement>) {\n        // Work around in chrome to make sure focus sets cursor position\n        requestAnimationFrame(() => {\n            setCursorPositionForElement(target as HTMLInputElement, getNextCursorPosition(target.value, mask))\n        })\n    }\n\n    return {\n        'data-value': value.length ? value: undefined,\n        value: value.length ? maskedValue : placeholder, // render placeholder if they haven't entered anything\n        placeholder,\n\n        onChange: handleChange,\n        onKeyDown,\n        onKeyUp,\n        onFocus,\n    }\n}\n\ninterface MaskProps {\n    value: string\n    onChange: (value: string) => void\n    mask: string | Mask\n    displayMask: string\n    debug?: boolean\n}\n\ntype Mask = Array<string | RegExp>\n\n/**\n * \n * @param element \n * @param cursorPosition \n */\nfunction setCursorPositionForElement(element: HTMLInputElement, cursorPosition: number): void {\n    element?.setSelectionRange(cursorPosition, cursorPosition, 'forward')\n}\n\nexport default useMask\nexport type {\n    MaskProps,\n    Mask,\n}"]},"metadata":{},"sourceType":"module"}