{"ast":null,"code":"import fitInputValueIntoMask from './fitInputValueIntoMask';\n/**\n * Assuming that any patterns that haven't been replaced with a value have not been fulfilled,\n * replace the leftover patterns with their placeholder character.\n * \n * @param value \n * @param mask \n * @param displayMask single character or exact length string\n */\n\nfunction getMaskedValue(value, mask, displayMask) {\n  const maskedValue = fitInputValueIntoMask(value, mask);\n  return maskedValue.reduce((result, characterOrPattern, characterIndex) => {\n    if (characterOrPattern instanceof RegExp) {\n      if (displayMask.length === 1) {\n        result[characterIndex] = displayMask;\n      } else {\n        result[characterIndex] = displayMask.charAt(characterIndex);\n      }\n    }\n\n    return result;\n  }, maskedValue).join('');\n}\n\nexport default getMaskedValue;","map":{"version":3,"sources":["/home/codespace/workspace/react-mask-hook/src/functions/getMaskedValue.ts"],"names":["fitInputValueIntoMask","getMaskedValue","value","mask","displayMask","maskedValue","reduce","result","characterOrPattern","characterIndex","RegExp","length","charAt","join"],"mappings":"AACA,OAAOA,qBAAP,MAAkC,yBAAlC;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAAuCC,IAAvC,EAAmDC,WAAnD,EAAgF;AAC5E,QAAMC,WAAW,GAAGL,qBAAqB,CAACE,KAAD,EAAQC,IAAR,CAAzC;AAEA,SAAOE,WAAW,CAACC,MAAZ,CAAmB,CAACC,MAAD,EAASC,kBAAT,EAA6BC,cAA7B,KAAgD;AACtE,QAAID,kBAAkB,YAAYE,MAAlC,EAA0C;AACtC,UAAIN,WAAW,CAACO,MAAZ,KAAuB,CAA3B,EAA8B;AAC1BJ,QAAAA,MAAM,CAACE,cAAD,CAAN,GAAyBL,WAAzB;AACH,OAFD,MAEO;AACHG,QAAAA,MAAM,CAACE,cAAD,CAAN,GAAyBL,WAAW,CAACQ,MAAZ,CAAmBH,cAAnB,CAAzB;AACH;AACJ;;AAED,WAAOF,MAAP;AACH,GAVM,EAUJF,WAVI,EAUSQ,IAVT,CAUc,EAVd,CAAP;AAWH;;AAED,eAAeZ,cAAf","sourcesContent":["import { Mask } from '../hooks/useMask'\nimport fitInputValueIntoMask from './fitInputValueIntoMask'\n\n\n/**\n * Assuming that any patterns that haven't been replaced with a value have not been fulfilled,\n * replace the leftover patterns with their placeholder character.\n * \n * @param value \n * @param mask \n * @param displayMask single character or exact length string\n */\nfunction getMaskedValue(value: string, mask: Mask, displayMask: string): string {\n    const maskedValue = fitInputValueIntoMask(value, mask)\n\n    return maskedValue.reduce((result, characterOrPattern, characterIndex) => {\n        if (characterOrPattern instanceof RegExp) {\n            if (displayMask.length === 1) {\n                result[characterIndex] = displayMask\n            } else {\n                result[characterIndex] = displayMask.charAt(characterIndex)\n            }\n        }\n\n        return result\n    }, maskedValue).join('')\n}\n\nexport default getMaskedValue"]},"metadata":{},"sourceType":"module"}